package com.softwareverde.bitcoin.block.merkleroot;

import com.softwareverde.bitcoin.block.Block;
import com.softwareverde.bitcoin.block.BlockInflater;
import com.softwareverde.bitcoin.hash.sha256.Sha256Hash;
import com.softwareverde.bitcoin.merkleroot.MerkleRoot;
import com.softwareverde.bitcoin.server.message.type.bloomfilter.set.SetTransactionBloomFilterMessage;
import com.softwareverde.bitcoin.server.message.type.node.feature.LocalNodeFeatures;
import com.softwareverde.bitcoin.server.message.type.node.feature.NodeFeatures;
import com.softwareverde.bitcoin.server.node.BitcoinNode;
import com.softwareverde.bitcoin.transaction.Transaction;
import com.softwareverde.bitcoin.transaction.input.TransactionInput;
import com.softwareverde.bitcoin.transaction.output.identifier.TransactionOutputIdentifier;
import com.softwareverde.bitcoin.util.BitcoinUtil;
import com.softwareverde.bitcoin.util.ByteUtil;
import com.softwareverde.bloomfilter.MutableBloomFilter;
import com.softwareverde.concurrent.pool.MainThreadPool;
import com.softwareverde.concurrent.pool.ThreadPool;
import com.softwareverde.constable.bytearray.ByteArray;
import com.softwareverde.constable.bytearray.MutableByteArray;
import com.softwareverde.constable.list.immutable.ImmutableList;
import com.softwareverde.constable.list.immutable.ImmutableListBuilder;
import com.softwareverde.constable.list.mutable.MutableList;
import com.softwareverde.io.Logger;
import com.softwareverde.util.HexUtil;
import com.softwareverde.util.IoUtil;
import org.junit.Assert;
import org.junit.Test;

public class PartialMerkleTreeTests {

    protected Sha256Hash calculateMerkleHash(final ByteArray left, final ByteArray right) {
        final MutableByteArray mutableByteArray = new MutableByteArray(Sha256Hash.BYTE_COUNT * 2);
        ByteUtil.setBytes(mutableByteArray.unwrap(), left.getBytes());
        ByteUtil.setBytes(mutableByteArray.unwrap(), right.getBytes(), Sha256Hash.BYTE_COUNT);
        return BitcoinUtil.sha256(BitcoinUtil.sha256(mutableByteArray)).toReversedEndian();
    }
    @Test
    public void should_inflate_full_partial_merkle_tree() {
        // RECEIVED MERKLE BLOCK: 000000000000051F68F43E9D455E72D9C4E4CE52E8A00C5E24C07340632405CB : C13E29F092B13CF77F63C26F6ADACB149B123C590E4A391625C1FC527D7ED400, 81248F8A4B2F706BFDCF44BA520E1B52AE9F792F6E9A88E3B7A96DA921D93BB2, 888513ED5123C28865A8DC98071C8B151B64FB606D958822FD5998447885C83A, C03EFEF0176F4A2806E9236E5FE30FBAA2E0B4BC9C3DA5616343544C3471DB54, DB62037D07DDCCCB2570CDF9266689B2DA5418F95B2AFEB550172CC6C1AF1EB1, 64703A301814F41C1A8BD97D8FCDAD7CD0CD9F8FAC52A19A897465146847905D, 66214DB7C353B476023C8FBD2620376014CBAD79A1F7F6A34E13061DBEA39C7E, 428F1D0C8DB8ECC5056CFD0AFA358E88723B43517D44D0654513CEA4BBE5C2FE, BBD8AF2B521014DC902C5BBDF62342691A84A2B6B513A53373E7235972F1877B, AAA826BB4E2E008F1E98540D2286BC03B883B47B756153813CAF2B5A1319CC64, D0946459416FFC768277B43328C9991B6BBC2FC430ED6F31C21D96C1904AEE7D, BC5EE2666DF334CDE365C7CEC9E39CA45D3E6994D558C904F969BD3565C25A1B, 39634324A7D416FD647310462C699D1741F7FB59FDA4CB32E56A49F728AB0A44, EF3F8DD1D6A2289A4369A1F8C2FA4E1B381115934D35A6D98DAFBE4EA02E4935, 48AFB9CD4B8B40D727B6F8ECD5EEDA614DE2C9766C91001A96621F63E7752261, EB24AF266BD7F1A1D7DB9491EE7F83CB6555445C2C6C395E63BD8130FE0A5080, 6F9A2E2ED8E7E7C3D3E586719F405D72D5BAE77889A67F8932AB26F035E403CB, 090D5DF9DBE219DC061DDEA79992C061EE45460B934522B0C1597DEEDC787E59, 56D6358363A9C7678F12B868F7EFA251696FC149BF75D4C9E313BA09BCAA3EF0, E1C9C3887846DD0A85F34BCDABDB3CB08602A73772D8717A33A3CC9A71A5B549, 517A4D3606B6FAFC3B83313FEA945A020E683FB8739236D605C2919D20D84725, 85B92B7A70502140406DAEBD798D6E7AEE45556FA6DF603FBA3949F7EA7FE159, DE8633943B85D3E5BD9E8148F98A4E6B88826C87542A1CF1E486A0D274EACCB9, EEE916F4581179751D9B0F1D1606CBD40C1B59BA1741A3522FA00101F33EA89F, 956E84553BC941CC163E614CA3BC2F4272DB63311C353A6D6D1FA1EB7B611E27, 5BF02DF68ECD7CFFB47254C26F529F8922922682089319B2BD44FA12BD4805DF, C1711DB417A6B295955BB94B02CAE5C9E789843679DC77D181D2D4604C38E611 : FFFFFFFFFFFFFE
        // RECEIVED MERKLE BLOCK: 000000000000051F68F43E9D455E72D9C4E4CE52E8A00C5E24C07340632405CB : C13E29F092B13CF77F63C26F6ADACB149B123C590E4A391625C1FC527D7ED400, 81248F8A4B2F706BFDCF44BA520E1B52AE9F792F6E9A88E3B7A96DA921D93BB2, 888513ED5123C28865A8DC98071C8B151B64FB606D958822FD5998447885C83A, C03EFEF0176F4A2806E9236E5FE30FBAA2E0B4BC9C3DA5616343544C3471DB54, DB62037D07DDCCCB2570CDF9266689B2DA5418F95B2AFEB550172CC6C1AF1EB1, 64703A301814F41C1A8BD97D8FCDAD7CD0CD9F8FAC52A19A897465146847905D, 66214DB7C353B476023C8FBD2620376014CBAD79A1F7F6A34E13061DBEA39C7E, 428F1D0C8DB8ECC5056CFD0AFA358E88723B43517D44D0654513CEA4BBE5C2FE, BBD8AF2B521014DC902C5BBDF62342691A84A2B6B513A53373E7235972F1877B, AAA826BB4E2E008F1E98540D2286BC03B883B47B756153813CAF2B5A1319CC64, D0946459416FFC768277B43328C9991B6BBC2FC430ED6F31C21D96C1904AEE7D, BC5EE2666DF334CDE365C7CEC9E39CA45D3E6994D558C904F969BD3565C25A1B, 39634324A7D416FD647310462C699D1741F7FB59FDA4CB32E56A49F728AB0A44, EF3F8DD1D6A2289A4369A1F8C2FA4E1B381115934D35A6D98DAFBE4EA02E4935, 48AFB9CD4B8B40D727B6F8ECD5EEDA614DE2C9766C91001A96621F63E7752261, EB24AF266BD7F1A1D7DB9491EE7F83CB6555445C2C6C395E63BD8130FE0A5080, 6F9A2E2ED8E7E7C3D3E586719F405D72D5BAE77889A67F8932AB26F035E403CB, 090D5DF9DBE219DC061DDEA79992C061EE45460B934522B0C1597DEEDC787E59, 56D6358363A9C7678F12B868F7EFA251696FC149BF75D4C9E313BA09BCAA3EF0, E1C9C3887846DD0A85F34BCDABDB3CB08602A73772D8717A33A3CC9A71A5B549, 517A4D3606B6FAFC3B83313FEA945A020E683FB8739236D605C2919D20D84725, 85B92B7A70502140406DAEBD798D6E7AEE45556FA6DF603FBA3949F7EA7FE159, DE8633943B85D3E5BD9E8148F98A4E6B88826C87542A1CF1E486A0D274EACCB9, EEE916F4581179751D9B0F1D1606CBD40C1B59BA1741A3522FA00101F33EA89F, 956E84553BC941CC163E614CA3BC2F4272DB63311C353A6D6D1FA1EB7B611E27, 5BF02DF68ECD7CFFB47254C26F529F8922922682089319B2BD44FA12BD4805DF, C1711DB417A6B295955BB94B02CAE5C9E789843679DC77D181D2D4604C38E611 : F676FB767BBBFD
        // RECEIVED MERKLE BLOCK: 000000000000051F68F43E9D455E72D9C4E4CE52E8A00C5E24C07340632405CB : C13E29F092B13CF77F63C26F6ADACB149B123C590E4A391625C1FC527D7ED400, 81248F8A4B2F706BFDCF44BA520E1B52AE9F792F6E9A88E3B7A96DA921D93BB2, 28F18D32A575C70B1C6DE65D9791DB3CD2935001A2454152B1BDC15149F48ACF, E2096D3A69339C939214FE1B0E9A4CAE4357222083457DF0FA1D49E62E310F0D, A467E28FEE66BFEE18357584D3D3751B05BAA75BBF36290CCFD46D6B141C72F7, 63080B6BED177956B59E209AAE1E76729DA0FAA64C3F605B67F9EBA3F06716A7 : 00FC
        // 0                                                                             _0
        // 1                                   _0                                        |                                           _1
        // 2                 _0                |                   _1                    |                     _2                    |                      _3
        // 3        _0       |        _1       |        _2         |          _3         |          _4         |          _5         |          _6          |           xx
        // 4   _0   |   _1   |   _2   |   _3   |   _4   |    _5    |    _6    |    _7    |    _8    |    _9    |    _10   |    _11   |    _12   |    _13    |    xxx    |    xxx
        // 5 t0  t1 | t2  t3 | t4  t5 | t6  t7 | t8  t9 | t10  t11 | t12  t13 | t14  t15 | t16  t17 | t18  t19 | t20  t21 | t22  t23 | t24  t25 | t26   xxx | xxx   xxx | xxx   xxx


        // 0000000000000000012F011B29194439757A67186A54C2614978F0D6192570F2
        // t0, t1, t2, t3, t4, t5   (1111000011111111)
        // 069511B719C8BDAFF18994EE682A0F62DAAECFFC0F7E0EB1D61367A81B3C4DA5, 82E98803F0148138DCCBDE3720BA407249EA269D4BEF3E0AC86294EB35EFAF48, 840A2056D8BB045FB9025C8ABC8813ADFCE443B6F4E63AF02E41EE2DA4FB76A1, 9F8FCFFDA780929FE069B445BA302064EB2BC30CCEA0C8B3D46FB37D1A2FB487, BF8DC762675906E5C862CF607886573E600FD4A7B244D49515C12558CAFD213A, E73CB816E35F15D1391D7FD27650511A9AF6879EA8F01AA44ED29C08CDCC388F : F0FF (1111000011111111)
        // t0                       (        11110000)
        // 069511B719C8BDAFF18994EE682A0F62DAAECFFC0F7E0EB1D61367A81B3C4DA5, 82E98803F0148138DCCBDE3720BA407249EA269D4BEF3E0AC86294EB35EFAF48, 37AC5F25240165D9041E9E7F3B4A353D982845F16E756C6584FE83E0F0A1B571, B243F473C8E957707E415408D0A3EC4DE093E7A3D1D7D5FD5D558A1DA3921A14 : F0 (11110000)
        // t0 and t3                (        11110101)
        // 069511B719C8BDAFF18994EE682A0F62DAAECFFC0F7E0EB1D61367A81B3C4DA5, 82E98803F0148138DCCBDE3720BA407249EA269D4BEF3E0AC86294EB35EFAF48, 840A2056D8BB045FB9025C8ABC8813ADFCE443B6F4E63AF02E41EE2DA4FB76A1, 9F8FCFFDA780929FE069B445BA302064EB2BC30CCEA0C8B3D46FB37D1A2FB487, B243F473C8E957707E415408D0A3EC4DE093E7A3D1D7D5FD5D558A1DA3921A14 : 00F5 (11110101)
        // t5                       (        10110100)
        // CE3C30E242B93478F75E55B4BFE71D5476711FE57C3E8A097C8F2A44B8E9FC50, BF8DC762675906E5C862CF607886573E600FD4A7B244D49515C12558CAFD213A, E73CB816E35F15D1391D7FD27650511A9AF6879EA8F01AA44ED29C08CDCC388F : B4 (10110100)
        // t4                       (        10111000)
        // CE3C30E242B93478F75E55B4BFE71D5476711FE57C3E8A097C8F2A44B8E9FC50, BF8DC762675906E5C862CF607886573E600FD4A7B244D49515C12558CAFD213A, E73CB816E35F15D1391D7FD27650511A9AF6879EA8F01AA44ED29C08CDCC388F : B8 (10111000)
        // t3, t4                   (1000000011010111)
        // D3BCEB689660BFDB8CE7DCBACBD9884EB6FB41D176FCC61E00C248B496432C6C, 840A2056D8BB045FB9025C8ABC8813ADFCE443B6F4E63AF02E41EE2DA4FB76A1, 9F8FCFFDA780929FE069B445BA302064EB2BC30CCEA0C8B3D46FB37D1A2FB487, BF8DC762675906E5C862CF607886573E600FD4A7B244D49515C12558CAFD213A, E73CB816E35F15D1391D7FD27650511A9AF6879EA8F01AA44ED29C08CDCC388F : 80D7 (1000000011010111)


        // t0: 11110000

        // 0                 _0
        // 1        _0       |        _1
        // 2   _0   |   _1   |   _2   |   xx
        // 3 t0  t1 | t2  t3 | t4  t5 | xx  cxx

        // 0                                                                                                                                                                                                                                  8A0DCDB807FA3933F293504B12E6AAED309DAB080A491ACBBDF335CC749D98F4
        // 1                                                                                                  CE3C30E242B93478F75E55B4BFE71D5476711FE57C3E8A097C8F2A44B8E9FC50                                                                                                     |                                                                                                      B243F473C8E957707E415408D0A3EC4DE093E7A3D1D7D5FD5D558A1DA3921A14
        // 2                                  D3BCEB689660BFDB8CE7DCBACBD9884EB6FB41D176FCC61E00C248B496432C6C                                 |                              37AC5F25240165D9041E9E7F3B4A353D982845F16E756C6584FE83E0F0A1B571                                     |                                      7F66FE7A5DB988FB7B8DC479F35C368147069F6CF9483EBF5C4B1EFC6F8683EB                             |                                  0000000000000000000000000000000000000000000000000000000000000000
        // 3 069511B719C8BDAFF18994EE682A0F62DAAECFFC0F7E0EB1D61367A81B3C4DA5 82E98803F0148138DCCBDE3720BA407249EA269D4BEF3E0AC86294EB35EFAF48 | 840A2056D8BB045FB9025C8ABC8813ADFCE443B6F4E63AF02E41EE2DA4FB76A1 9F8FCFFDA780929FE069B445BA302064EB2BC30CCEA0C8B3D46FB37D1A2FB487 | BF8DC762675906E5C862CF607886573E600FD4A7B244D49515C12558CAFD213A E73CB816E35F15D1391D7FD27650511A9AF6879EA8F01AA44ED29C08CDCC388F | 0000000000000000000000000000000000000000000000000000000000000000 0000000000000000000000000000000000000000000000000000000000000000

        final ByteArray left = Sha256Hash.fromHexString("CE3C30E242B93478F75E55B4BFE71D5476711FE57C3E8A097C8F2A44B8E9FC50").toReversedEndian();
        final ByteArray right = Sha256Hash.fromHexString("B243F473C8E957707E415408D0A3EC4DE093E7A3D1D7D5FD5D558A1DA3921A14").toReversedEndian();
        System.out.println(calculateMerkleHash(left, right));

        final BlockInflater blockInflater = new BlockInflater();
        final String blockData = IoUtil.getResource("/blocks/0000000000000000012F011B29194439757A67186A54C2614978F0D6192570F2");
        final Block block = blockInflater.fromBytes(HexUtil.hexStringToByteArray(blockData));

        final ImmutableListBuilder<Sha256Hash> merkleHashes = new ImmutableListBuilder<Sha256Hash>(block.getTransactionCount());
        for (final Sha256Hash merkleHash : new Sha256Hash[]{ Sha256Hash.fromHexString("069511B719C8BDAFF18994EE682A0F62DAAECFFC0F7E0EB1D61367A81B3C4DA5"), Sha256Hash.fromHexString("82E98803F0148138DCCBDE3720BA407249EA269D4BEF3E0AC86294EB35EFAF48"), Sha256Hash.fromHexString("37AC5F25240165D9041E9E7F3B4A353D982845F16E756C6584FE83E0F0A1B571"), Sha256Hash.fromHexString("B243F473C8E957707E415408D0A3EC4DE093E7A3D1D7D5FD5D558A1DA3921A14") }) {
            merkleHashes.add(merkleHash);
        }


        final PartialMerkleTree partialMerkleTree = PartialMerkleTree.build(block.getTransactionCount(), merkleHashes.build(), MutableByteArray.wrap(HexUtil.hexStringToByteArray("F0")));
        final MerkleRoot merkleRoot = partialMerkleTree.getMerkleRoot();

        Assert.assertEquals(block.getMerkleRoot(), merkleRoot);
    }

    @Test
    public void foo() throws Exception {
        // Setup
        final BlockInflater blockInflater = new BlockInflater();
        final String blockData = IoUtil.getResource("/blocks/0000000000000000012F011B29194439757A67186A54C2614978F0D6192570F2");
        final Block block = blockInflater.fromBytes(HexUtil.hexStringToByteArray(blockData));

        final MutableBloomFilter bloomFilter = MutableBloomFilter.newInstance(128L, 0.01D, 0L);

        int i = 0;
        for (final Transaction transaction : block.getTransactions()) {
            if (i == 3 || i == 4) for (final TransactionInput transactionInput : transaction.getTransactionInputs()) {
                final TransactionOutputIdentifier transactionOutputIdentifier = TransactionOutputIdentifier.fromTransactionInput(transactionInput);
                bloomFilter.addItem(transactionOutputIdentifier.toBytes());
            }
            i += 1;
        }

        final ThreadPool threadPool = new MainThreadPool(1, 1000L);

        final BitcoinNode bitcoinNode = new BitcoinNode("btc.softwareverde.com", 8333, threadPool, new LocalNodeFeatures() {
            @Override
            public NodeFeatures getNodeFeatures() {
                final NodeFeatures nodeFeatures = new NodeFeatures();
                nodeFeatures.enableFeature(NodeFeatures.Feature.BITCOIN_CASH_ENABLED);
                nodeFeatures.enableFeature(NodeFeatures.Feature.BLOOM_CONNECTIONS_ENABLED);
                return nodeFeatures;
            }
        });

        bitcoinNode.connect();

        final SetTransactionBloomFilterMessage bloomFilterMessage = new SetTransactionBloomFilterMessage();
        bloomFilterMessage.setBloomFilter(bloomFilter);
        bitcoinNode.queueMessage(bloomFilterMessage);

        Thread.sleep(1000L);

        bitcoinNode.requestMerkleBlock(block.getHash(), new BitcoinNode.DownloadBlockCallback() {
            @Override
            public void onResult(final Block result) {
                Logger.log("???");
            }
        });

        // Thread.sleep(60000L);
        Thread.sleep(3000L);

        bitcoinNode.disconnect();
    }
}
