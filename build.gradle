group 'com.softwareverde'
version '1.1.1'

apply plugin: 'java'
apply plugin: 'java-library'

sourceCompatibility = 1.8

sourceSets {
    main {
        java
        resources
    }
    server {
        java
        resources

        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    test {
        java
        resources

        compileClasspath += sourceSets.server.output
        runtimeClasspath += sourceSets.server.output
    }
}

configurations {
    serverImplementation.extendsFrom implementation
    serverRuntimeOnly.extendsFrom runtimeOnly

    testImplementation.extendsFrom serverImplementation
}

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    // Library
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation  group: 'org.bouncycastle',          name: 'bcprov-jdk15on',         version: '1.61'

    api             group: 'com.github.softwareverde',  name: 'java-logging',           version: 'v1.0.4'
    api             group: 'com.github.softwareverde',  name: 'java-util',              version: 'v2.0.2'
    api             group: 'com.github.softwareverde',  name: 'java-async',             version: 'v0.3.0'
    api             group: 'com.github.softwareverde',  name: 'json',                   version: 'v2.0.0'
    implementation  group: 'com.github.softwareverde',  name: 'java-db-mysql',          version: 'v4.0.2'

    // Server
    serverImplementation group: 'com.github.softwareverde',  name: 'http-servlet',           version: 'v3.1.0'
    serverImplementation(group: 'com.github.softwareverde',  name: 'java-db-mysql-embedded', version: 'v2.0.1') {
        exclude group: 'org.apache.logging.log4j',  module: '*'
        exclude group: 'ch.qos.logback',            module: '*'
        exclude group: 'org.springframework.boot',  module: '*'
        exclude group: 'javax.annotations',         module: '*'
        exclude group: 'javax.enterprise',          module: '*'
        exclude group: 'javax.inject',              module: '*'
        exclude group: 'org.apache.maven',          module: '*'
        exclude group: 'org.hamcrest',              module: '*'
        exclude group: 'org.slf4j',                 module: '*'
        // exclude group: 'org.springframework',       module: '*'
        // exclude group: 'commons-io',                module: '*'
        // exclude group: 'org.apache.commons',        module: '*'
    }

    serverImplementation group: 'org.jocl',                  name: 'jocl',                   version: '2.0.1'

    // Testing
    testImplementation group: 'junit',                     name: 'junit',                  version: '4.11'
    testImplementation group: 'com.github.softwareverde',  name: 'java-mock',              version: 'v2.0.0'
}

// configurations.all {
//     resolutionStrategy {
//         failOnVersionConflict()
//     }
// }

task makeFatJar(type: Jar) {
    manifest {
        attributes  'Implementation-Title': 'Bitcoin Server',
                    'Implementation-Version': version,
                    'Main-Class': 'com.softwareverde.bitcoin.server.main.Main'
    }

    baseName = project.name + '-server-all'

    from (configurations.serverCompileClasspath.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }

    from sourceSets.main.output
    from sourceSets.server.output

    with jar
}

task makeLibJar(type: Jar) {
    manifest {
        attributes  'Implementation-Title': 'Bitcoin Verde Library',
                    'Implementation-Version': version
    }

    baseName = project.name + '-lib'

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    with jar
}

task makeJar(type: Jar) {
    manifest {
        attributes  'Implementation-Title': 'Bitcoin Server',
                    'Implementation-Version': version,
                    'Main-Class': 'com.softwareverde.bitcoin.server.main.Main',
                    'Class-Path': project.configurations.serverCompileClasspath.collect { 'libs/' + it.getName() }.join(' ')
    }

    baseName = project.name + '-server'

    from sourceSets.main.output
    from sourceSets.server.output

    with jar
}

task copyDependencies(type: Copy) {
    from project.configurations.compileClasspath
    into "$buildDir/libs/libs"

    from project.configurations.serverCompileClasspath
    into "$buildDir/libs/libs"
}

test {
    minHeapSize = "512m"
    maxHeapSize = "2024m"
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
        showStandardStreams false

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
