group 'com.softwareverde'
version '1.0.0'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile     group: 'org.bouncycastle',          name: 'bcprov-jdk16',           version: '1.46'
    compile     group: 'com.github.softwareverde',  name: 'java-constable',         version: 'v0.3.5'
    compile     group: 'com.github.softwareverde',  name: 'java-util',              version: 'v1.2.6'
    compile     group: 'com.github.softwareverde',  name: 'java-tls',               version: 'v0.2.+'
    compile     group: 'com.github.softwareverde',  name: 'java-async',             version: 'v0.2.+'
    compile     group: 'com.github.softwareverde',  name: 'java-db-mysql',          version: 'v2.1.7'
    compile     group: 'com.github.softwareverde',  name: 'java-db-mysql-embedded', version: 'v0.1.7'
    compile     group: 'com.github.softwareverde',  name: 'java-socket',            version: 'v0.2.3'
    compile     group: 'com.github.softwareverde',  name: 'json',                   version: 'v1.0.4'
    
    compile     group: 'org.jocl',                  name: 'jocl',                   version: '2.0.1'

    compile     group: 'com.github.softwareverde', name: 'http-servlet',            version: 'v1.1.0'
    compile     group: 'com.github.softwareverde', name: 'java-socket',             version: 'v0.2.0'

    // Logging
    compile     group: 'org.slf4j',                 name: 'slf4j-api',              version: '1.7.9'
    compile     group: 'org.apache.logging.log4j',  name: 'log4j-slf4j-impl',       version: '2.8.2'
    compile     group: 'org.apache.logging.log4j',  name: 'log4j-api',              version: '2.8.2'
    compile     group: 'org.apache.logging.log4j',  name: 'log4j-core',             version: '2.8.2'

    testCompile group: 'junit',                     name: 'junit',                  version: '4.11'
    testCompile group: 'com.github.softwareverde',  name: 'java-mock',              version: 'v2.0.0'
}

task makeFatJar(type: Jar) {
    manifest {
        attributes  'Implementation-Title': 'Bitcoin Server',
                    'Implementation-Version': version,
                    'Main-Class': 'com.softwareverde.bitcoin.server.Main'
    }

    baseName = project.name + '-server'

    doFirst {
        from (configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
            exclude 'META-INF/MANIFEST.MF'
            exclude 'META-INF/*.SF'
            exclude 'META-INF/*.DSA'
            exclude 'META-INF/*.RSA'
        }
    }

    with jar
}

task makeJar(type: Jar) {
    manifest {
        attributes  'Implementation-Title': 'Bitcoin Server',
                    'Implementation-Version': version,
                    'Main-Class': 'com.softwareverde.bitcoin.server.Main',
                    'Class-Path': configurations.compile.collect { 'libs/' + it.getName() }.join(' ')
    }

    baseName = project.name + '-server'

    with jar
}

task copyDependencies(type: Copy) {
    from configurations.runtime
    into "$buildDir/libs/libs"
}

tasks.withType(Test) {
    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}
